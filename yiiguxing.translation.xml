<application>
  <component name="AppStorage">
    <histories>
      <item value="An actual SQL String got from an {@link SqlSource} after having processed any dynamic content.&#10;  The SQL may have SQL placeholders &quot;?&quot; and an list (ordered) of an parameter mappings &#10;  with the additional information for each parameter (at least the property name of the input object to read &#10;  the value from). &#10;  &lt;br&gt;&#10;  Can also have additional parameters that are created by the dynamic language (for loops, bind...)." />
      <item value="Represents the content of a mapped statement read from an XML file or an annotation. &#10;  It creates the SQL that will be passed to the database out of the input parameter received from the user." />
      <item value="Language" />
      <item value="Parse the SQL (pre: &lt;selectKey&gt; and &lt;include&gt; were parsed and removed)" />
      <item value="replace variables in text node" />
      <item value="Current context for static variables with values" />
      <item value="Replace variables inside" />
      <item value="Read placeholders and their values from include node definition." />
      <item value="search open token" />
      <item value="close token was not found." />
      <item value=" found open token. let's search close token." />
      <item value="this close token is escaped. remove the backslash and continue." />
      <item value="this open token is escaped. remove the backslash and continue." />
      <item value="replace variables in attribute values" />
      <item value="Recursively apply includes through all SQL fragments." />
      <item value="Parse selectKey after includes and remove them." />
      <item value="Include Fragments before parsing" />
      <item value="skip this statement if there is a previous one with a not null databaseId" />
      <item value="Spring may not know the real resource name so we set a flag&#10;                     to prevent loading again this resource from the mapper interface&#10;                     look at MapperAnnotationBuilderloadXmlResource" />
      <item value="skip this fragment if there is a previous one with a not null databaseId" />
      <item value=" Error attempting to get column 'tableCode' from result set. " />
      <item value=" There is no setter for property named 'url' in 'class poo0054.entity.TableDynamic__jvstf7f_0'" />
      <item value="No Such Method Exception" />
      <item value="Error instantiating class poo0054.entity.TableDynamic with invalid types" />
      <item value="with invalid types " />
      <item value=" attempting to get column 'tableCode' from result set" />
      <item value=" attempting to get column 'id1' from result set.  " />
      <item value="Could not process result for mapping:" />
      <item value="Incomplete" />
      <item value="Remove parent constructor if this resultMap declares a constructor." />
      <item value=" column is optional only in nested resultmaps but not in the rest" />
      <item value="there should be no mappings without typehandler" />
      <item value="cannot define both nestedQueryId and nestedResultMapId" />
      <item value="More than one type handlers registered." />
      <item value="type drives generics here" />
      <item value="remove this when Reflector is fixed to return Types" />
      <item value="UNKNOWN TYPE HANDLER" />
      <item value=" Perpet" />
      <item value="Execution" />
      <item value=" The MyBatis SQL mapper framework makes it easier to use a relational database with object-oriented&#10;    applications. MyBatis couples objects with stored procedures or SQL statements using a XML descriptor or&#10;    annotations. Simplicity is the biggest advantage of the MyBatis data mapper over object relational mapping&#10;    tools." />
      <item value=" TestEngine with ID 'junit-vintage' failed to discover tests" />
      <item value="Undefined reference" />
      <item value="The MyBatis SQL mapper framework makes it easier to use a relational database with object-oriented&#10;    applications. MyBatis couples objects with stored procedures or SQL statements using a XML descriptor or&#10;    annotations. Simplicity is the biggest advantage of the MyBatis data mapper over object relational mapping&#10;    tools." />
      <item value="Run slow tests only on github ci, to force run otherwise use -D&quot;env.GITHUB&quot;" />
      <item value="Result Maps collection already contains value for " />
      <item value=" Error parsing SQL Mapper Configuration" />
      <item value="no protocol" />
      <item value="Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream." />
      <item value="or the individual test results." />
      <item value="protocol" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="79" />
        <entry key="ENGLISH" value="80" />
        <entry key="CZECH" value="2" />
        <entry key="PORTUGUESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1666059937593" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20220930001362687" />
      </app-key>
    </option>
    <option name="keepFormat" value="true" />
    <option name="showActionsInContextMenuOnlyWithSelection" value="false" />
    <option name="translator" value="BAIDU" />
  </component>
</application>